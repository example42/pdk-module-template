<% app_name = name.gsub('psick::', '').gsub('::tp', '') -%>
# <%= name %>
#
# @summary This psick profile manages <%= app_name %> with Tiny Puppet (tp)
#
# @example Include it to install <%= app_name %>
#   include <%= name %>
# 
# @example Include in PSICK via hiera (yaml)
#   psick::profiles:
#     <%= app_name %>: <%= name %>
# 
# @example Manage extra configs via hiera (yaml)
#   <%= name %>::ensure: present
#   <%= name %>::conf_hash:
#     <%= app_name %>.conf:
#       epp: profile/<%= app_name %>/<%= app_name %>.conf.epp
#     dot.conf:
#       epp: profile/<%= app_name %>/dot.conf.epp
#       base_dir: conf
#
# @param manage If to actually manage any resource or not
# @param ensure If to install or remove <%= app_name %>
# @param conf_hash An hash to be passed to tp::conf to create configuration
#   files for <%= app_name %>. Check tp::conf parameters for available values.
# @param dir_hash An hash to be passed to tp::dir to create directories
#   for <%= app_name %>. Check tp::dir parameters for available values.
#   Hash looked up in deep merge mode.
# @param options_hash An open hash of options to use in the templates referenced
#   in the $conf_hash. This is passed as parameter to all the tp::conf defines.
#   Note, if an options_hash is set also in the $conf_hash that gets precedence.
#   It's looked up via a deep merge hash
# @param settings_hash An hash of tp settings to customise <%= app_name %> file
#   paths, package names, repo info and whatever can match Tp::Settings data type:
#   https://github.com/example42/puppet-tp/blob/master/types/settings.pp
# @param auto_prereq If to automatically install eventual dependencies for <%= app_name %>.
#   Set to false if you have problems with duplicated resources, being sure that you 
#   manage the prerequistes to install <%= app_name %> (other packages, repos or tp installs).
# @param auto_conf If to automatically use default configurations for <%= app_name %>.
<%- if params -%>
<%-   params.each do |param| -%>
# @param <%= param[:name] %> <%= param[:description] %>.
<%-   end -%>
<%- end -%>
class <%= name %> (
  Boolean                  $manage        = $::psick::manage,
  Enum['present','absent'] $ensure        = 'present',
  Hash                     $conf_hash     = {},
  Hash                     $dir_hash      = {},
  Hash                     $options_hash  = {},
  Hash                     $settings_hash = {},
  Boolean                  $auto_prereq   = $::psick::auto_prereq,
  Boolean                  $auto_conf     = $::psick::auto_conf,
  <%- if params -%>
<%-   params.each do |param| -%>
  <%= param[:type].ljust(max_type_length) %> $<%= param[:name] %>,
<%-   end -%>
<%- end -%>
) {

  if $manage {
    #Â tp::install <%= app_name %>
    $install_defaults = {
      ensure             => $ensure,
      options_hash       => $options_hash,
      settings_hash      => $settings_hash,
      auto_repo          => $auto_prereq,
      auto_conf          => $auto_conf,
      auto_prerequisites => $auto_prereq,
    }
    ::tp::install { '<%= app_name %>':
      * => $install_defaults,
    }
  
    # tp::conf iterated over $conf_hash
    $conf_defaults = {
      ensure             => $ensure,
      options_hash       => $options_hash,
      settings_hash      => $settings_hash,
    }
    $conf_hash.each | $k,$v | {
      ::tp::conf { $k:
        * => $conf_defaults + $v,
      }
    }
  
    # tp::dir iterated over $dir_hash
    $dir_ensure = $ensure ? {
      'absent' => 'absent',
      default  => 'directory',
    }
    $dir_defaults = {
      ensure             => $dir_ensure,
      settings_hash      => $settings_hash,
    }
    $dir_hash.each | $k,$v | {
      ::tp::dir: { $k:
        * => $dir_defaults + $v,
      }
    }
  }
}

